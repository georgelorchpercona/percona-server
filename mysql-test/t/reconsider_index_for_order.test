# Features of the test table:
#   * Synthetic primary key (`id`).
#   * Secondary key.
#   * Index with a covered and non-covered column.

CREATE TABLE `t` (
  `id`                  BIGINT        NOT NULL,
  `other_id`            BIGINT        NOT NULL,
  `covered_column`      VARCHAR(50)   NOT NULL,
  `non_covered_column`  VARCHAR(50)   NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `index_other_id_covered_column` (`other_id`, `covered_column`)
);

# The size of the table actually doesn't matter to test whether the
# optimizer switch works, but larger tables are required to show the
# bad performance of a bad optimizer choice.

let $n = 10;
while ($n)
{
  eval INSERT INTO t (id, other_id, covered_column, non_covered_column) VALUES ($n, $n % 1000, '$n', '$n');
  dec $n;
}

SET
  optimizer_trace = "enabled=on",
  optimizer_trace_max_mem_size = 1000000,
  end_markers_in_json = ON;

SELECT `non_covered_column` FROM `t` WHERE `other_id` = 555 ORDER BY `id` ASC LIMIT 2;
SELECT (trace LIKE '%reconsidering_access_paths_for_index_ordering%') AS should_be_1 FROM information_schema.optimizer_trace;

SELECT * FROM `t` WHERE `other_id` = 555 AND `id` IN (1, 2, 3) ORDER BY `id` DESC;
SELECT (trace LIKE '%reconsidering_access_paths_for_index_ordering%') AS should_be_1 FROM information_schema.optimizer_trace;

SET optimizer_switch = "reconsider_index_for_order=off";

SELECT `non_covered_column` FROM `t` WHERE `other_id` = 555 ORDER BY `id` ASC LIMIT 2;
SELECT (trace LIKE '%reconsidering_access_paths_for_index_ordering%') AS should_be_0 FROM information_schema.optimizer_trace;

SELECT * FROM `t` WHERE `other_id` = 555 AND `id` IN (1, 2, 3) ORDER BY `id` DESC;
SELECT (trace LIKE '%reconsidering_access_paths_for_index_ordering%') AS should_be_0 FROM information_schema.optimizer_trace;

SET optimizer_switch = default;

SELECT `non_covered_column` FROM `t` WHERE `other_id` = 555 ORDER BY `id` ASC LIMIT 2;
SELECT (trace LIKE '%reconsidering_access_paths_for_index_ordering%') AS should_be_1 FROM information_schema.optimizer_trace;

SELECT * FROM `t` WHERE `other_id` = 555 AND `id` IN (1, 2, 3) ORDER BY `id` DESC;
SELECT (trace LIKE '%reconsidering_access_paths_for_index_ordering%') AS should_be_1 FROM information_schema.optimizer_trace;

DROP TABLE t;
